enum DeviceStatus {
    """
    online
    """
    online

    """
    offline
    """
    offline
}

type Software {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Device {
    id: ID!
    name: String!
    status: DeviceStatus
    deviceType: DeviceType! @belongsTo
    software: [Software!]! @belongsToMany
    port: String!
    camera_port: String
    is_reserved: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateDevice {
    name: String!
    status: DeviceStatus
    device_type_id: ID!
    port: String!
    camera_port: String
    software: [ID!]!
}

input UpdateDevice {
    id: ID!
    name: String!
    deviceType: ID!
    port: String!
    camera_port: String
    software: [ID!]!
}

type DeviceType {
    id: ID!
    name: String!
    devices: [Device!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateDeviceType {
    name: String!
}

input UpdateDeviceType {
    id: ID!
    name: String!
}

input CreateSoftware {
    name: String!
}

input UpdateSoftware {
    id: ID!
    name: String!
}

type SyncServerOutput {
    name: String!
    title: String!
    defaultVisibilityFor: [String!]
}

type SyncServerSelectOptions {
    name: String!
    value: Int!
}

type SyncServerInput {
    name: String
    rules: String
    title: String
    placeholder: String
    type: String
    row: Int!
    order: Int!
    options: [SyncServerSelectOptions]
}

type SyncServerCommand {
    name: String!
    input: [SyncServerInput]!
}

type SyncServerSoftware {
    name: String!
    has_schema: Boolean
    has_demo: Boolean
    commands: [SyncServerCommand]!
}

type SyncServerDevice {
    id: ID!
    name: String!
    type: String!
    output: [SyncServerOutput]!
    software: [SyncServerSoftware]!
}

type SyncServerData {
    devices: [SyncServerDevice]!
}

input DeviceReservationStatusInput {
    deviceID: ID!
    isReserved: Boolean!
}

type UpdateDeviceReservationStatusResult {
    updatedDevicesCount: Int!
}

type CameraStatus {
    isConnected: Boolean!
    status: String!
}

type VideoStreamStatus {
    isRunning: Boolean!
    status: String!
}

type StopVideoStreamStatus {
    isStopped: Boolean!
    status: String!
}

extend type Query {
    SyncServer: SyncServerData!
    cameraStatus(deviceID: ID!): CameraStatus!
    videoStreamStatus(deviceID: ID!): VideoStreamStatus!
}

extend type Mutation {
    updateDeviceReservationStatus(deviceReservationStatusInput: DeviceReservationStatusInput): UpdateDeviceReservationStatusResult!
    startVideoStream(deviceID: ID!): VideoStreamStatus!
    stopVideoStream(deviceID: ID!): StopVideoStreamStatus!

}

extend type Query @guard(with: ["api"]) {
    devices: [Device!]! @paginate(defaultCount: 10)
    device_types: [DeviceType!]! @paginate(defaultCount: 10)
    software: [Software!]! @paginate(defaultCount: 10)
    getDevice(id: ID! @eq): Device! @find
}

extend type Mutation @guard(with: ["api"]) {
    createDevice(input: CreateDevice @spread): Device!
    updateDevice(input: UpdateDevice @spread): Device!
    removeDevice(id: ID!): Device! @delete
    createDeviceType(input: CreateDeviceType @spread): DeviceType!
    updateDeviceType(input: UpdateDeviceType @spread): DeviceType! @update
    removeDeviceType(id: ID!): DeviceType! @delete
    createSoftware(input: CreateSoftware @spread): Software! @create
    updateSoftware(input: UpdateSoftware @spread): Software! @update
    removeSoftware(id: ID!): Software! @delete
}
