#import auth.graphql
#import configs.graphql
#import system.graphql


"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    experimentDetails(experimentID: ID): ExperimentDetail
    me: User @auth
}


enum ExperimentStatus {
    """running"""
    running

    """finished"""
    finished

    """failed"""
    failed
}

type Mutation {
    updateUser(inputUpdate: UpdateUser @spread): User @update
    RunScript(runScriptInput: RunScriptInput): OutputScript
    ChangeScript(runScriptInput: RunScriptInput): OutputScript
    StopScript(runScriptInput: RunScriptInput): OutputScript
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
}

type User {
    id: ID
    name: String
    email: String
    created_at: DateTime
    updated_at: DateTime
}

input RunScriptInput {
    scriptName: String
    inputParameter: String
    fileName: String
    demoName: String
    device: DeviceConfig
    experimentID: ID
}

input DeviceConfig {
    deviceName: String
    software: String
    deviceID: ID!
}

type RunScriptType {
    command: String
}

type OutputScript {
    status: String
    experimentID: ID!
    errorMessage: String!
}

type ArrayOfData {
    name: String!
    data: [Float]!
}

type ExperimentDetail {
    url: String
    status: ExperimentStatus
    values: [ArrayOfData]!
}

input UpdateUser {
    id: ID!
    name: String!
}
